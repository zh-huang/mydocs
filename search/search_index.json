{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"mkdocs/","title":"Mkdocs usage","text":""},{"location":"mkdocs/#installation","title":"Installation","text":"<p>Install <code>mkdocs-material</code> via pip. Venv recomended.</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>Or install mkdocs only:</p> <pre><code>pip install mkdocs\n</code></pre>"},{"location":"mkdocs/#create-a-new-project","title":"Create a new project","text":"<p>Use the <code>new</code> command to create a new project:</p> <pre><code>cd path\\\\to\\\\project\nmkdocs new .\n</code></pre> <p>This will create a new project in current folder.</p> <ol> <li><code>mkdocs.yml</code> is the configuration file for the project</li> <li><code>decs\\index.md</code> file is the landing page for your documentation site.</li> <li><code>docs</code> directory is where you will put your documentation.</li> </ol>"},{"location":"mkdocs/#preview-website","title":"Preview website","text":"<pre><code>mkdocs serve\n</code></pre>"},{"location":"newpage/","title":"Homepage","text":""},{"location":"newpage/#plain-text","title":"Plain text","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"newpage/#code","title":"Code","text":"<p>Some <code>code</code></p> python code<pre><code>import numpy as np\ndef fun():\n    a = 1\n# comment\n</code></pre>"},{"location":"newpage/#emoji","title":"Emoji","text":""},{"location":"GPT/prompts/","title":"Prompts","text":"<p>zh-huang: useful prompts for gpt3.5</p> <p>GitHub Copilot: Here are some useful prompts for GPT-3.5:</p> <ol> <li>\"Translate the following English text to French: <code>{text}</code>\"</li> <li>\"Generate a Python function to calculate the factorial of a number.\"</li> <li>\"Write a brief summary of the article: <code>{article_text}</code>\"</li> <li>\"Create a SQL query to find all users in the 'users' table who joined after January 1, 2020.\"</li> <li>\"Generate a JavaScript function to sort an array of numbers in ascending order.\"</li> <li>\"Explain the concept of recursion in computer programming.\"</li> <li>\"Write a short story about a robot learning to understand human emotions.\"</li> <li>\"Generate a React component that displays a list of items.\"</li> <li>\"Create a Python script to scrape web data from a given URL.\"</li> <li>\"Explain the difference between classical inheritance and prototypal inheritance in JavaScript.\"</li> </ol> <p>Remember, the effectiveness of the prompts will depend on how well they are structured and the complexity of the task.</p>"},{"location":"NNDL/01%20Numpy%20tutorial/","title":"01 Numpy tutorial","text":""},{"location":"NNDL/01%20Numpy%20tutorial/#array-operations","title":"Array operations","text":"<pre><code># 1. Import numpy\nimport numpy as np\n\n# 2. Create a one-dimensional array a initialized to [4,5,6], (1) print the type of a (2) print the shape of a (3) print the first element of a (value is 4)\na = np.array([4, 5, 6])\nprint(type(a), a.shape, a[0])\n\n# 3. Create a two-dimensional array b, initialized to [[4, 5, 6], [1, 2, 3]] (1) print the shape of b (2) print the elements b(0,0), b(0,1), b(1,1) (values are 4, 5, 2)\nb = np.array([[4, 5, 6], [1, 2, 3]])\nprint(b.shape, b[0][0], b[0][1], b[1][1])\n\n# 4. (1) Create a matrix a filled with zeros, size 3x3, integer type (2) Create a matrix b filled with ones, size 4x5 (3) Create an identity matrix c, size 4x4 (4) Generate a random matrix d, size 3x2\na = np.zeros((3, 3), dtype=int)\nb = np.ones((4, 5))\nc = np.eye(4)\nd = np.random.rand(3, 2)\nprint(a)\nprint(b)\nprint(c)\nprint(d)\n\n# 5. Create an array a, (value is [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]), (1) print a (2) print the values of elements at indices (2,3) and (0,0)\na = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nprint(a)\nprint(a[2][3], a[0][0])\n\n# 6. Assign the elements of rows 0 to 1 and columns 2 to 3 of array a to b, (1) print b (2) print the value of the element at (0,0) in b\nb = a[0:2, 2:4]\nprint(b)\nprint(b[0][0])\n\n# 7. Assign the last two rows of array a to c, (1) print c (2) print the last element of the first row in c\nc = a[1:, :]\nprint(c)\nprint(c[0][-1])\n\n# 8. Create array a, initialized to [[1, 2], [3, 4], [5, 6]], print the elements at indices (0,0), (1,1), (2,0)\na = np.array([[1, 2], [3, 4], [5, 6]])\nprint(a[[0, 1, 2], [0, 1, 0]])\n\n# 9. Create matrix a, initialized to [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], print elements at indices (0,0), (1,2), (2,0), (3,1)\na = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nb = np.array([0, 2, 0, 1])\nprint(a[np.arange(4), b])\n\n# 10. Add 10 to each of the four elements obtained in the previous step and print matrix a\na[np.arange(4), b] += 10\nprint(a)\n</code></pre>"},{"location":"NNDL/01%20Numpy%20tutorial/#array-mathematical-operations","title":"Array mathematical operations","text":"<pre><code># 11. Execute x = np.array([1, 2]), then print the data type of x\nx = np.array([1, 2])\nprint(x.dtype)\n\n# 12. Execute x = np.array([1.0, 2.0]), then print the data type of x\nx = np.array([1.0, 2.0])\nprint(x.dtype)\n\n# 13. Execute x = np.array([[1, 2], [3, 4]], dtype=np.float64), y = np.array([[5, 6], [7, 8]], dtype=np.float64), then print x+y, np.add(x,y)\nx = np.array([[1, 2], [3, 4]], dtype=np.float64)\ny = np.array([[5, 6], [7, 8]], dtype=np.float64)\nprint(x + y)\nprint(np.add(x, y))\n\n# 14. Subtract y from x and print the result, both using \"-\" operator and np.subtract() function\nprint(x - y)\nprint(np.subtract(x, y))\n\n# 15. Multiply x and y element-wise and print the result, also print the result of np.multiply(), and np.dot() for matrix multiplication\nprint(x * y)\nprint(np.multiply(x, y))\nprint(np.dot(x, y))\n\n# 16. Divide x by y and print the result using np.divide()\nprint(np.divide(x, y))\n\n# 17. Calculate the square root of x and print the result using np.sqrt()\nprint(np.sqrt(x))\n\n# 18. Perform matrix multiplication of x and y using both x.dot(y) and np.dot(x,y), then print the results\nprint(x.dot(y))\nprint(np.dot(x, y))\n\n# 19. Calculate the sum of elements in x along different axes and print the results\nprint(np.sum(x))\nprint(np.sum(x, axis=0))\nprint(np.sum(x, axis=1))\n\n# 20. Calculate the mean of elements in x along different axes and print the results\nprint(np.mean(x))\nprint(np.mean(x, axis=0))\nprint(np.mean(x, axis=1))\n\n# 21. Transpose matrix x and print the result\nprint(x.T)\n\n# 22. Calculate the exponential of each element in x and print the result\nprint(np.exp(x))\n\n# 23. Find the indices of the maximum values in x along different axes and print the results\nprint(np.argmax(x))\nprint(np.argmax(x, axis=0))\nprint(np.argmax(x, axis=1))\n\n# 24. Plot y = x^2 where x = np.arange(0, 100, 0.1)\nimport matplotlib.pyplot as plt\nx = np.arange(0, 100, 0.1)\ny = x * x\nplt.plot(x, y)\nplt.show()\n\n# 25. Plot sin(x) and cos(x) where x = np.arange(0, 3*np.pi, 0.1)\nx = np.arange(0, 3 * np.pi, 0.1)\nplt.plot(x, np.sin(x))\nplt.show()\nplt.plot(x, np.cos(x))\nplt.show()\n</code></pre>"}]}